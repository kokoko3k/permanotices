' Gambas module file

Public signals As Integer[] = [Signal.sigabrt, Signal.SIGINT, Signal.SIGILL, Signal.SIGQUIT, Signal.SIGTERM, Signal.SIGTSTP, signal.sigsegv]

Public Match_Start_Notification As String = "method call time=* sender=* destination=* serial=* path=/org/freedesktop/Notifications; interface=org.freedesktop.Notifications; member=Notify"
'Public Match_End_Notification As String = "* ]\n* int32 *\n"
Public Match_End_Notification As String = "* ]\n int32 *\n"


Public Struct sMy_Notification
  app_name As String
  replaces_id As String
  cloned_id As String
  app_icon As String
  summary As String
  body As String
  actions As String[]
  hints As Collection[]
  expire_timeout As Long
  dDate As Date
  serial As Integer
End Struct

Public pDbusMonitor As Process 'get notification bodyes
Public pDbusMonitorReply As Process 'get replies / notification ids
Public aNotifications As SMy_Notification[]


Public Sub ProcessSignals(Doit As Boolean)
  Dim sig As Integer
  If doit
    For Each sig In signals
      'Debug sig
      Signal[sig].Catch
    Next
      Else
    For Each sig In signals
      Signal[sig].reset
    Next
  Endif
End

Public Sub Application_Signal(Sig As Integer)
  Debug "Got Signal " & sig & " Quitting as clean as possible"
  ProcessSignals(False)
  QuitNow()
  Quit
End

Public Sub Which(exe As String) As String
  Dim out As String
  Shell "which " & exe To out
  Return Trim(out)
End


Public TmpDir As String 
Public notify_send_exe As String
Public dBusMonitorExe As String = ""
  
Public Sub Main()


  Try dBusMonitorExe = Which("dbus-monitor")
  If dBusMonitorExe = "" Then 
    Debug "dbus-monitor cannot be found in $PATH"
    Quit
  Endif
  dBusMonitorExe = "timeout -s 9 3600 " & dBusMonitorExe
  TmpDir = File.Dir(Temp())
  notify_send_exe = tmpdir & "/notify-send.sh"
  Try Copy "notify-send.sh" To notify_send_exe
  Try Chmod notify_send_exe To "rwxr-x---"
  If Error Then 
    Debug "Could not set File permissions"
    Quit
  Endif
  
  start_dBusMonitor(dBusMonitorExe)
  start_dBusMonitor_reply(dBusMonitorExe)

  aNotifications = New SMy_Notification[]
End

Public Sub start_dBusMonitor(MonitorExe As String)
  Dim cmd As String
  cmd = dBusMonitorExe
  cmd &= " --monitor"
  cmd &= " \""
  cmd &= " type='method_call',"
  cmd &= " path='/org/freedesktop/Notifications',"
  cmd &= " interface='org.freedesktop.Notifications',"
  cmd &= " member='Notify'"
  cmd &= "\""
  'cmd &= "|grep --line-buffered '.*'"
  Debug cmd
  pDbusMonitor = Shell cmd For Read Write As "pDbusMonitor"
End

Public Sub start_dBusMonitor_reply(dBusMonitorExe As String)
  Dim cmd_reply As String
  cmd_reply = dBusMonitorExe
  cmd_reply &= " --monitor"
  cmd_reply &= " \""
  cmd_reply &= " type='method_return'"
  cmd_reply &= "\""
  cmd_reply &= " | "
  cmd_reply &= "grep --line-buffered -B1 ' uint32 '"
  'cmd_reply &= " grep -B1 uint32"
  Debug cmd_reply
  pDbusMonitorReply = Shell cmd_reply For Read As "pDbusMonitorReply"
End

Public Sub pDbusMonitorreply_kill()
  start_dBusMonitor_reply(dBusMonitorExe)
End

Public Sub pDbusMonitor_kill()
  start_dBusMonitor(dBusMonitorExe)
End

 

Public ids As New Collection

Public Sub pDbusMonitorreply_read()
  Dim sOutput As String
  Dim sline As String
  Dim lines As New String[]
  Dim reply_serial, id As Integer
  Read #Last, sOutput, -8192
  If Not monitoring Then Return
  lines = Split(sOutput, "\n")
  For Each sline In lines
    Select sline
      Case Like "method return time=* sender=* destination=* serial=* reply_serial=*" 
        Try reply_serial = CInt(get_field(sline, "reply_serial"))
        If Error Then Return
      Case Like "* uint32 *"
        Try id = CInt(svalue(sline))
        If Error Then Return
    End Select
  Next
  If id <> "" Then
    If reply_serial <> "" Then
      ids[reply_serial] = id
      Debug "Notification ID: " & id & " has reply_serial: " & reply_serial
    Endif
  Endif
  
End


Private last_notify As String
Public Sub pDbusMonitor_read()
  Dim sOutput, tmp As String
  Dim to_parse As String
  'Read #Last, sOutput, - Lof(Last)
  While Lof(Last) > 0
    Read #Last, tmp, - Lof(Last)
    Debug "data coming"
    sOutput &= tmp
  Wend

  'Debug sOutput
  Debug "Length=" & Len(sOutput)
  If Not monitoring Then Return

  If last_notify <> "" Then 'means last output was not complete
    last_notify &= sOutput
    Debug "appending..."
      Else
    last_notify = sOutput
  Endif
  If is_complete_notification(last_notify) Then 
    to_parse = last_notify
    last_notify = ""
    Try Parse_and_clone(Split(to_parse, "\n"))  
    If Error Then Debug "Error parsing notification"
      Else
    last_notify &= sOutput
  Endif
End

Public Sub is_complete_notification(lines As String) As Boolean
  Debug Split(lines, "\n")
  Debug "testing Match_Start_Notification"
  If Left(lines, 4096) Like "*" & Match_Start_Notification & "*" Then
    Debug "testing Match_END_Notification"
    If Right(lines, 4096) Like "*" & Match_End_Notification Then 
      Debug "END testing Match_END_Notification"
      Return True
    Endif
  Endif
  Return False
End


Public Sub Parse_and_clone(saNotification As String[])
  Dim t As String 
  Dim serial, j As Integer
  Dim n As SMy_Notification
  Dim saActions As String[]
  
  Debug "Searching for notification start line"
  Repeat
    Try t = saNotification.Extract(0, 1)[0]
    If Error Then 
      Debug "Dropping messages"
      Return
    Endif
  Until t Like "*" & Match_Start_Notification & "*"
  
  Debug "Find the serial"
  If t Like "*method call time=* sender=* *destination* serial=* path=* interface=*" Then
    'get serial
    serial = get_field(t, "serial")
    Debug "Serial: " & serial
      Else
    Debug "Could not get Serial!"
    Return
  Endif
  n = New SMy_Notification
  Try n.serial = serial

  ' Try t = saNotification.Extract(0, 1)[0]
  ' If Error Then 
  '   Debug "Dropping messages"
  '   Return
  ' Endif

  Debug "Find App name"
    Try n.app_name = extract_string(saNotification)
      If Error Then Goto GenericError
        Debug "Check if next field is uint32"
        If Not (saNotification[0] Like " uint32 *") Then
          Debug "Missing required field, dropping notification"
          Return
        Endif
        
  Debug "Find replaces_id"
    Try n.replaces_id = svalue(saNotification.Extract(0, 1)[0])
    If Error Then Goto GenericError
    If n.replaces_id <> "0" Then
      Debug "Not going to replace a notification which replaces another"
      Return
    Endif
      Debug "Check if next field is string"  
      If Not (saNotification[0] Like " string \"*") Then
        Debug "Missing required field, dropping notification"
        Return
      Endif  

  Debug "Find app icon"
      Try n.app_icon = extract_string(saNotification)    
      If Error Then Goto GenericError
      Debug "Check if next field is string"  
      If Not (saNotification[0] Like " string \"*") Then
        Debug "Missing required field, dropping notification"
        Return
      Endif
  
  Debug "Find Summary"  
      Try n.summary = extract_string(saNotification)
      If Error Then Goto GenericError
      Debug "Check if next field is string"  
      If Not (saNotification[0] Like " string \"*") Then
        Debug "Missing required field, dropping notification"
        Return
      Endif
  
  Debug "Find Body"
      Try n.body = extract_string(saNotification)
      If Error Then Goto GenericError
      Debug "Check if next field is an array"  
      If Not (saNotification[0] Like " array [") Then
        Debug "Missing required field, dropping notification"
        Return
      Endif      
  
  Debug "Find Actions array"
 'parse actions array
      saNotification.Extract(0, 1)
      saActions = New String[]
      For j = 0 To saNotification.max
        'add actions to the array actions:
        If Not (saNotification[j] Like "* ]") Then 'do not add the close array symbol as an action
          saActions.Add(saNotification[j]) 
          Debug "New action: " & saNotification[j]
        Endif
        
        If saNotification[j] Like " ]" Then 
          If saActions.count > 0 Then 
            Debug "Not going to clone notifications with actions"
            Return
          Endif
          Break
        Endif
      Next


      saNotification.Extract(0, j + 1)
      Debug saActions.count
      Debug "Check if next field is an array"  
        If Not (saNotification[0] Like " array [") Then
          Debug "Missing required field, dropping notification"
          Return
        Endif          

  Debug "Hints array is skipped, find expire_timeout field"
      For j = saNotification.Max DownTo 0
        If saNotification[j] Like " int32 *" Then
          n.expire_timeout = svalue(saNotification[j])
          If n.expire_timeout = 0 Then 
              Debug "Not going to clone persistent notifications"
              Return
            Endif
          Break
        Endif
      Next
  
  n.dDate = Now
  Debug "New Notification"
  Repeat
    Wait 0.1 'keep this wait up in the cycle
    Try n.cloned_id = ids[serial]
  Until Not Error

  notify(n, 0.2)
  Return
  
  GenericError:
  Debug "Generic Error, dropping Notification"
  Return
  
End

Public Function extract_string(slines As String[]) As String
  'Given an array of strings, find the value of the first occurrence
  'of: string "value"
  'the value may be spanned over multiple lines.
  Dim sLine As String
  Dim subData As String
  Dim i As Integer
  Dim iStart, iEnd As Integer
  For i = 0 To slines.max
    If slines[i] Like " string \"*\"" Then
      Return svalue(slines.Extract(i, 1)[0]) 'all in a line, good
        Else If slines[i] Like " string \"*" Then 'only the beginning then
          iStart = i
          Break
    Endif
  Next
  For i = iStart + 1 To slines.max
    If slines[i] Ends "\"" Then
      iEnd = i
      Break
    Endif
  Next
  subData = slines.Extract(iStart, iEnd + 1).Join("\n")
  Return svalue(subData)
End




Public Function svalue(s As String) As String
  ' anykeyword "anyvalue" -> anyvalue
  ' anykeyword anyvalue -> anyvalue
  Dim start As Integer
  s = Trim(s)
  start = InStr(s, " ")
  s = Right(s, - start)
  If Left(s) = "\"" Then s = Right(s, -1)
  If Right(s) = "\"" Then s = Left(s, -1)
  Return s
End

Public Function get_field(t As String, f As String) As Variant
  Dim value_start, value_end, value As Integer
  t &= " " 'parsing function need empty space at the end
  value_start = InStr(t, " " & f & "=") + Len(f) + 2
  value_end = InStr(t, " ", value_start)
  Try value = CInt(Mid(t, value_start, value_end - value_start))
  Return value
End


Public monitoring As Boolean = True

Public Sub Notify_all()
  Dim n As SMy_Notification
  monitoring = False 'do not get your own messages
  For Each n In aNotifications
    notify(n, 0)
  Next
  Wait 0.1
  monitoring = True
  aNotifications.clear
End


Public Sub notify(n As SMy_Notification, wait_delay As Float)
  Dim cmd As String = ""
  Dim body As String
  If wait_delay <> 0 Then monitoring = False

  cmd = notify_send_exe
  cmd &= " --urgency=critical "
  cmd &= " --expire-time=0 "
  cmd &= " --app-name=" & sq(n.app_name)
  cmd &= " --icon=" & sq(n.app_icon)
  cmd &= " --replace=" & sq(n.cloned_id)
  cmd &= " " & sq(n.summary)
  body = Replace(n.body, "\n", "<br>")
  'body &= "<br><br> At: " & n.dDate
  cmd &= " " & sq(body)
  Debug cmd
  Shell cmd  
  If wait_delay <> 0 Then 
    Wait wait_delay
    monitoring = True
  Endif
End

Public Sub sq(s As String) As String
  Return "'" & Replace(s, "\n", "<br>") & "'"
End


Public Sub quitnow()
  pDbusMonitor.Kill()  
  pDbusMonitorreply.Kill()
End


